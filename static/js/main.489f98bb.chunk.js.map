{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetails","handleClick","setState","previousState","event","this","props","className","summary","location","start","dateTime","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","numberOfEvents","handleInputChange","placeholder","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.489f98bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n  state = {\n    showDetails: false\n  }\n\n  handleClick = () => {\n    this.setState(previousState => ({\n      showDetails: !previousState.showDetails\n    }));\n  }\n\n  render() {\n    const { event } =this.props;\n    const { showDetails } = this.state;\n\n    return (\n      <div className=\"event\">\n        <div className=\"eventName\">\n          <h1>{event.summary}</h1>\n          <p className=\"eventLocation\">{event.location}</p>\n          <div className=\"eventTimeStart\">{event.start.dateTime}</div>\n        </div>\n        {!showDetails\n          ? <button\n              className=\"detailsButton\"\n              onClick={() => this.handleClick()}\n              >Show details\n            </button>\n          : <div>\n              <div className=\"eventDetails\">\n                <p className=\"eventDescription\">{event.description}</p>\n              </div>\n              <button\n                className=\"detailsButton\"\n                onClick={() => this.handleClick()}\n                >Hide details\n              </button>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  render() {\n    const { events } = this.props;\n    return (\n      <ul className=\"EventList\">\n        {events.map(event =>\n          <li key={event.id}>\n            <Event event={event} />\n          </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n  // Alternative way of setting initial state, can also be done within constructor { super(); this.state =...}\n  state = {\n    query: '',\n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({ \n      query: value,\n      suggestions,\n    });\n  }\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n        />\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((suggestion) => (\n            <li \n              key={suggestion}\n              onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\n          ))}\n          <li key='all'>\n            <b>See all cities</b>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n  state = {\n    numberOfEvents: 32\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    return this.setState({\n      numberOfEvents: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"numberOfEvents\">\n        <input\n          className=\"eventNumberInput\"\n          type=\"number\"\n          placeholder=\"32\"\n          value={this.state.numberOfEvents}\n          onChange={this.handleInputChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch />\n        <EventList />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}